from ...objects import dp, MySignalEvent, SignalEvent
from ...utils import edit_message, new_message
from datetime import datetime
from idm import __version__
from ..my_signals.auto_friends_add import afa_thread
from ..my_signals.online import online_thread
from threading import Thread


@dp.signal_event_handle('–∏–Ω—Ñ–æ', '–∏–Ω—Ñ–∞', '-i', 'info')
def sinfo(event: SignalEvent) -> str:

    def is_alive(th: Thread) -> bool:
        if th == None:return False
        if not th.is_alive():return False
        return True

    if event.msg['from_id'] not in event.db.trusted_users:
        return "ok"

    owner = event.api('users.get', user_ids=event.db.owner_id)[0]


    message = f"""============–ò–ù–§–û============

    –í–ª–∞–¥–µ–µ—Ç –î–µ–∂—É—Ä–Ω—ã–º: [id{owner['id']}|{owner['first_name']} {owner['last_name']}]ü•µ
    –ö–æ–ª-–≤–æ —á–∞—Ç–æ–≤:[{len(event.db.chats.keys())}]
    –ò—Ä–∏—Å —á–∞—Ç ID: [{event.chat.iris_id}]
    –ò–º—è –±–µ—Å–µ–¥—ã: [{event.chat.name}]

    =======–í–ï–ß–ù–´–ô –û–ù–õ–ê–ô–ù=======
           –í—ã–∫–ª—é—á–µ–Ω
    ==============================


    """.replace('  ', ' ')
    new_message(event.api, event.chat.peer_id, message=message)
    return "ok"